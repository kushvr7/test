{"version":3,"sources":["loadeer.gif","logo.svg","Use/Bod.js","Use/GiCity.js","Loa/Loder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bod","Radium","props","useState","city","state","setstate","style","textAlign","fontSize","height","border","borderWidth","borderRadius","width","paddingLeft","type","placeholder","onChange","event","target","value","opacity","backgroundColor","color","onClick","getTemp","Loder","loade","marginTop","window","innerHeight","src","loader","App","temp","wispeed","discri","longi","lati","load","er","Loadeer","det","textShadow","fontWeight","className","fetch","then","response","json","data","console","log","kev","main","wspeed","wind","speed","discrip","weather","description","lonm","coord","lon","latm","lat","cel","Math","ceil","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a947efaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadeer.d7a6290c.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction Bod() {\r\n\r\n    const style = {\r\n        backgroundColor : 'grey',\r\n        color : 'white',\r\n        textAlign : 'center',\r\n        // marginTop : '0px',\r\n      \r\n        height : 60 ,\r\n    }\r\n\r\n    return (\r\n        <div style={style} >\r\n            <h1> Weather Report </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bod;\r\n","import React , {useState} from 'react';\r\nimport Radium from 'radium';\r\n\r\n\r\nfunction GiCity(props) {\r\n     const [state, setstate] = useState({\r\n         city: \"\"\r\n     })\r\n\r\n\r\n     const handleChange = (event) => {\r\n\r\n        setstate({\r\n           city : event.target.value ,\r\n        })\r\n     };\r\n\r\n    const style = {\r\n        textAlign : 'center',\r\n        fontSize : '50px',\r\n        height : 150\r\n    }\r\n\r\n    const inp={\r\n        border: 'none',\r\n        borderWidth: '0',\r\n        borderRadius : 8,\r\n        width: 290,\r\n        height: 40,\r\n        fontSize : 15,\r\n        paddingLeft : 70\r\n    }\r\n\r\n\r\n    const bts = {\r\n        border: 'none',\r\n        borderWidth: '0',\r\n        width: 100 ,\r\n        height: 40,\r\n        opacity: 0.5,\r\n        borderRadius: 6,\r\n        backgroundColor: 'black',\r\n        color: 'white',\r\n        ':focus':{\r\n            backgroundColor: 'white',\r\n            color: 'black'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            <input style={inp} type=\"text\"\r\n             placeholder=\" City \"\r\n              onChange={handleChange}   />\r\n              <br></br>\r\n            <button style={bts} onClick={() => props.getTemp(state.city )} >FORECAST</button>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default Radium(GiCity);\r\n","import React from 'react';\r\n// import Loadeer from './public/loadeer.gif';\r\n\r\nfunction Loder(props) {\r\n    //50 present component width\r\n    //150 the component at the top GiCity\r\n    //so subtract total of 200 from the window height\r\n let hi =  window.innerHeight - 205;\r\n//  console.log(hi );\r\n    const loade ={\r\n        // backgroundImage : 'url('+loader+')',\r\n        width: 50,\r\n        height : 50,\r\n        marginTop: hi ,\r\n        \r\n      \r\n};\r\n      \r\n\r\n\r\n    return (\r\n        <div> \r\n        <img src={props.loader}  style={loade} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loder;\r\n","import React , {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Bod from './Use/Bod';\nimport GiCity from './Use/GiCity';\n// import Loader from 'public/loader';\nimport Loder from './Loa/Loder';\nimport Loadeer from './loadeer.gif';\nfunction App() {\n\n  const [state, setstate] = useState({\n    temp: ' ',\n    wispeed: ' ',\n    discri: null,\n    longi: ' ',\n    lati: ' ',\n\n    load: false\n  });\n\n const cel = 0;\n\n const getTemperature = (city ) => {\n  //weather api \n  // i signed up to get the api key\n  const url = 'https://api.openweathermap.org/data/2.5/weather?q='+city+'&appid=d98cacde5f72232ab2e91e6253138b81';\n   fetch(url).then(response => {\n     return response.json();\n   }).then(data => {\n     console.log(data)\n      const kev = data.main.temp;\n      const wspeed = data.wind.speed;\n      const discrip = data.weather[0].description;\n      console.log(discrip);\n      const lonm = data.coord.lon;\n      const latm = data.coord.lat;\n      const cel = Math.ceil(kev - 273.15) ;\n      console.log(cel);\n       setstate({\n        temp : cel ,\n        load: true,\n        wispeed: wspeed,\n        discri: discrip,\n        longi: lonm,\n        lati: latm,\n\n      });\n     \n   \n   }).catch(error =>{\n   console.log(error);\n   })\n   \n  // cel = bool ;\n   \n\n\n }\nconst er = Loadeer;\n\nconst Tsp ={\n   fontSize: 60,\n   textShadow: \"1px 3px 11px white \"\n  //  textAlign: 'center',\n\n// #9E9E9E\n}\n\nconst det ={\n  textShadow: \"1px 3px 4px   #2F4F4F \",\n  fontWeight: 'bold'\n}\n\n\n\nconst pst ={\n  textAlign: 'center',\n  marginTop : 70\n}\n// console.log(state.discri);\n\n// marginLeft: '10%'\n  return (\n    <div className=\"App\">\n      {/* <Bod /> */}\n       <GiCity getTemp={getTemperature} />\n       { state.load === true ?\n         <p style={pst}>\n         <span style={Tsp}>{state.temp}</span><span>Â°C</span> <br/><br/>\n       <span style={det}>{state.discri}</span><br/><br/>\n         <span>Wind :</span><span style={det}> {state.wispeed} km</span><br />\n         <span>Latitude : <span style={det}>{state.lati}</span> <b>||</b> longitude : <span style={det}>{state.longi }</span>     </span>\n         </p> :\n         <Loder loader={er}/> \n      }\n  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}